name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/docs.yml'

env:
  AWS_REGION: us-west-2
  EKS_CLUSTER_NAME: ai-bi-cluster
  NAMESPACE: ai-business-intelligence
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  DOCKER_IMAGE: ai-business-intelligence

jobs:
  # Test and Lint
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio black flake8 mypy
          
      - name: Run linting
        run: |
          black --check --diff .
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
          
      - name: Run type checking
        run: |
          mypy agents/ core/ api/ --ignore-missing-imports
          
      - name: Run tests
        run: |
          pytest tests/ -v --cov=agents --cov=core --cov=api --cov-report=xml --cov-report=html
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build Docker Image
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          
      - name: Upload Trivy image scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'

  # Deploy Infrastructure (Terraform)
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"
          
      - name: Terraform Init
        working-directory: ./deployment/terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=production/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TERRAFORM_LOCK_TABLE }}"
            
      - name: Terraform Plan
        working-directory: ./deployment/terraform
        run: |
          terraform plan \
            -var="environment=production" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="cluster_name=${{ env.EKS_CLUSTER_NAME }}" \
            -var="alpha_vantage_api_key=${{ secrets.ALPHA_VANTAGE_API_KEY }}" \
            -var="finnhub_api_key=${{ secrets.FINNHUB_API_KEY }}" \
            -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}" \
            -out=tfplan
            -detailed-exitcode
        continue-on-error: true
        
      - name: Terraform Apply
        working-directory: ./deployment/terraform
        if: success() || failure()
        run: |
          terraform apply -auto-approve tfplan
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
          TF_VAR_grafana_admin_password: ${{ secrets.GRAFANA_PASSWORD }}

  # Deploy Application (Kubernetes)
  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --region ${{ env.AWS_REGION }} \
            --name ${{ env.EKS_CLUSTER_NAME }}
            
      - name: Create Kubernetes secrets
        run: |
          kubectl create secret generic ai-bi-secrets \
            --from-literal=DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            --from-literal=JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            --from-literal=ALPHA_VANTAGE_API_KEY="${{ secrets.ALPHA_VANTAGE_API_KEY }}" \
            --from-literal=FINNHUB_API_KEY="${{ secrets.FINNHUB_API_KEY }}" \
            --from-literal=OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            --from-literal=GRAFANA_PASSWORD="${{ secrets.GRAFANA_PASSWORD }}" \
            --from-literal=SENTRY_DSN="${{ secrets.SENTRY_DSN }}" \
            --from-literal=SMTP_HOST="${{ secrets.SMTP_HOST }}" \
            --from-literal=SMTP_PORT="${{ secrets.SMTP_PORT }}" \
            --from-literal=SMTP_USERNAME="${{ secrets.SMTP_USERNAME }}" \
            --from-literal=SMTP_PASSWORD="${{ secrets.SMTP_PASSWORD }}" \
            --from-literal=WEBHOOK_URL="${{ secrets.WEBHOOK_URL }}" \
            --from-literal=WEBHOOK_SECRET="${{ secrets.WEBHOOK_SECRET }}" \
            --namespace ${{ env.NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -
            
      - name: Update image in kustomization
        run: |
          sed -i "s|newName: ai-business-intelligence|newName: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}|g" \
            deployment/kubernetes/kustomization.yaml
          sed -i "s|newTag: latest|newTag: ${{ github.sha }}|g" \
            deployment/kubernetes/kustomization.yaml
            
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -k deployment/kubernetes/
          
      - name: Wait for deployment
        run: |
          kubectl wait --for=condition=available --timeout=300s \
            deployment/ai-bi-app -n ${{ env.NAMESPACE }}
            
      - name: Verify deployment
        run: |
          kubectl get pods -n ${{ env.NAMESPACE }}
          kubectl get services -n ${{ env.NAMESPACE }}
          kubectl get ingress -n ${{ env.NAMESPACE }}

  # Run Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: deploy-application
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --region ${{ env.AWS_REGION }} \
            --name ${{ env.EKS_CLUSTER_NAME }}
            
      - name: Wait for application to be ready
        run: |
          kubectl wait --for=condition=ready --timeout=300s \
            pod -l app=ai-bi-system -n ${{ env.NAMESPACE }}
            
      - name: Get application URL
        id: app-url
        run: |
          INGRESS_HOST=$(kubectl get ingress ai-bi-ingress -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.rules[0].host}')
          echo "url=https://$INGRESS_HOST" >> $GITHUB_OUTPUT
          
      - name: Run integration tests
        run: |
          # Wait for application to be fully ready
          sleep 30
          
          # Test health endpoint
          curl -f https://${{ steps.app-url.outputs.url }}/health || exit 1
          
          # Test API endpoints
          curl -f https://${{ steps.app-url.outputs.url }}/api/v1/health || exit 1
          
          # Run integration test suite
          python -m pytest tests/integration/ -v

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-application
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install locust
          
      - name: Get application URL
        id: app-url
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
          INGRESS_HOST=$(kubectl get ingress ai-bi-ingress -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.rules[0].host}')
          echo "url=https://$INGRESS_HOST" >> $GITHUB_OUTPUT
          
      - name: Run performance tests
        run: |
          # Run Locust performance tests
          locust -f tests/performance/locustfile.py \
            --host=https://${{ steps.app-url.outputs.url }} \
            --users=10 \
            --spawn-rate=2 \
            --run-time=5m \
            --headless \
            --html=performance-report.html
            
      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance-report.html

  # Notify Deployment Status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-application, integration-tests, performance-tests]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
        
      - name: Create deployment summary
        if: always()
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.deploy-application.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Application URL**: https://${{ needs.deploy-application.outputs.app-url }}" >> $GITHUB_STEP_SUMMARY 