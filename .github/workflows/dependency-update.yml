name: Dependency Management

on:
  schedule:
    # Run dependency checks weekly on Monday at 8 AM UTC
    - cron: '0 8 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of dependencies to update'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - security
          - python
          - docker
          - terraform

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Check for outdated dependencies
  check-dependencies:
    name: Check Dependencies
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install pip-tools
        run: |
          pip install pip-tools
          
      - name: Check Python dependencies
        run: |
          echo "## Python Dependencies Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check outdated packages
          pip list --outdated --format=freeze > outdated.txt || true
          
          if [ -s outdated.txt ]; then
            echo "### Outdated Packages:" >> $GITHUB_STEP_SUMMARY
            cat outdated.txt | while read line; do
              echo "- $line" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "âœ… All Python packages are up to date" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Check security vulnerabilities
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Security Check" >> $GITHUB_STEP_SUMMARY
          
          # Install safety
          pip install safety
          
          # Run safety check
          safety check --json --output safety-report.json || true
          
          if [ -f safety-report.json ]; then
            VULNERABILITIES=$(jq '.vulnerabilities | length' safety-report.json)
            echo "Found $VULNERABILITIES security vulnerabilities" >> $GITHUB_STEP_SUMMARY
            
            if [ "$VULNERABILITIES" -gt 0 ]; then
              echo "### Vulnerable Packages:" >> $GITHUB_STEP_SUMMARY
              jq -r '.vulnerabilities[] | "- \(.package_name) \(.installed_version) -> \(.vulnerable_spec)"' safety-report.json >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-security-report
          path: safety-report.json

  # Update dependencies (manual trigger only)
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    needs: check-dependencies
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
      - name: Update Python dependencies
        if: github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'python'
        run: |
          # Install pip-tools
          pip install pip-tools
          
          # Update requirements
          pip-compile --upgrade requirements.in
          
          # Check if there are changes
          if git diff --quiet requirements.txt; then
            echo "No Python dependency updates needed"
          else
            echo "Python dependencies updated"
            git add requirements.txt
            git commit -m "deps: update Python dependencies"
            git push
          fi
          
      - name: Update Docker base image
        if: github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'docker'
        run: |
          # Check for newer base image
          CURRENT_IMAGE=$(grep "FROM" deployment/docker/Dockerfile | head -1 | awk '{print $2}')
          echo "Current base image: $CURRENT_IMAGE"
          
          # This would typically involve checking Docker Hub for newer versions
          # For now, we'll just log the current version
          echo "Docker base image check completed"
          
      - name: Update Terraform providers
        if: github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'terraform'
        run: |
          cd deployment/terraform
          
          # Initialize Terraform
          terraform init
          
          # Check for provider updates
          terraform providers -json > providers.json
          
          echo "Terraform providers check completed"

  # Create dependency update PR
  create-update-pr:
    name: Create Update PR
    runs-on: ubuntu-latest
    needs: [check-dependencies, update-dependencies]
    if: github.event_name == 'workflow_dispatch' && needs.update-dependencies.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "deps: update dependencies"
          title: "ðŸ”§ Update Dependencies"
          body: |
            ## Dependency Updates
            
            This PR updates the following dependencies:
            
            - Python packages
            - Docker base images
            - Terraform providers
            
            ### Changes
            - Updated Python dependencies to latest compatible versions
            - Updated Docker base images for security patches
            - Updated Terraform providers for latest features
            
            ### Testing
            - [ ] All tests pass
            - [ ] Security scan clean
            - [ ] Deployment successful
            
            ### Notes
            - Review changes carefully
            - Test in staging environment
            - Monitor for any breaking changes
          branch: dependency-updates
          delete-branch: true
          labels: |
            dependencies
            automated
          assignees: ${{ github.actor }}
          reviewers: ${{ github.actor }}

  # Dependency summary
  summary:
    name: Dependency Summary
    runs-on: ubuntu-latest
    needs: [check-dependencies, update-dependencies, create-update-pr]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "## Dependency Management Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependency Check**: ${{ needs.check-dependencies.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependency Update**: ${{ needs.update-dependencies.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PR Creation**: ${{ needs.create-update-pr.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Review any security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          echo "2. Test dependency updates in staging" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor for any breaking changes" >> $GITHUB_STEP_SUMMARY
          echo "4. Update documentation if needed" >> $GITHUB_STEP_SUMMARY 