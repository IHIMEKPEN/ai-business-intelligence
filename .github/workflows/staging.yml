name: Staging Deployment

on:
  push:
    branches: [ develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

env:
  AWS_REGION: us-west-2
  EKS_CLUSTER_NAME: ai-bi-cluster-staging
  NAMESPACE: ai-business-intelligence-staging
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  DOCKER_IMAGE: ai-business-intelligence

jobs:
  # Test and Build for Staging
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio black flake8
          
      - name: Run tests
        run: |
          pytest tests/ -v --cov=agents --cov=core --cov=api --cov-report=xml
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push staging image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/docker/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:staging-${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:staging-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test-and-build
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --region ${{ env.AWS_REGION }} \
            --name ${{ env.EKS_CLUSTER_NAME }}
            
      - name: Create staging secrets
        run: |
          kubectl create secret generic ai-bi-secrets \
            --from-literal=DB_PASSWORD="${{ secrets.STAGING_DB_PASSWORD }}" \
            --from-literal=JWT_SECRET="${{ secrets.STAGING_JWT_SECRET }}" \
            --from-literal=ALPHA_VANTAGE_API_KEY="${{ secrets.ALPHA_VANTAGE_API_KEY }}" \
            --from-literal=FINNHUB_API_KEY="${{ secrets.FINNHUB_API_KEY }}" \
            --from-literal=OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            --from-literal=GRAFANA_PASSWORD="${{ secrets.STAGING_GRAFANA_PASSWORD }}" \
            --namespace ${{ env.NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -
            
      - name: Update staging kustomization
        run: |
          sed -i "s|newName: ai-business-intelligence|newName: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}|g" \
            deployment/kubernetes/kustomization.yaml
          sed -i "s|newTag: latest|newTag: staging-${{ github.sha }}|g" \
            deployment/kubernetes/kustomization.yaml
          sed -i "s|namespace: ai-business-intelligence|namespace: ${{ env.NAMESPACE }}|g" \
            deployment/kubernetes/kustomization.yaml
            
      - name: Deploy to staging
        run: |
          kubectl apply -k deployment/kubernetes/
          
      - name: Wait for deployment
        run: |
          kubectl wait --for=condition=available --timeout=300s \
            deployment/ai-bi-app -n ${{ env.NAMESPACE }}
            
      - name: Get staging URL
        id: staging-url
        run: |
          INGRESS_HOST=$(kubectl get ingress ai-bi-ingress -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.rules[0].host}')
          echo "url=https://$INGRESS_HOST" >> $GITHUB_OUTPUT
          
      - name: Run staging tests
        run: |
          # Wait for application to be ready
          sleep 30
          
          # Test health endpoint
          curl -f https://${{ steps.staging-url.outputs.url }}/health || exit 1
          
          # Run smoke tests
          python -m pytest tests/smoke/ -v

  # Create Pull Request Comment
  comment-pr:
    name: Comment on PR
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## Staging Deployment')
            );
            
            const commentBody = `## Staging Deployment
            
            âœ… **Status**: Deployed successfully
            
            ðŸ”— **Staging URL**: ${{ needs.deploy-staging.outputs.url }}
            
            ðŸ“Š **Commit**: \`${{ github.sha }}\`
            
            ðŸ§ª **Tests**: All tests passed
            
            ---
            
            **Review the staging deployment and approve for production deployment.**
            
            <details>
            <summary>Deployment Details</summary>
            
            - **Environment**: Staging
            - **Cluster**: ${{ env.EKS_CLUSTER_NAME }}
            - **Namespace**: ${{ env.NAMESPACE }}
            - **Image**: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:staging-${{ github.sha }}
            
            </details>`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody,
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody,
              });
            } 