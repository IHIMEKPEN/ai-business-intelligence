name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      image_tag:
        description: 'Docker image tag to deploy'
        required: false
        default: 'latest'
        type: string
      skip_tests:
        description: 'Skip running tests'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-west-2
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  DOCKER_IMAGE: ai-business-intelligence

jobs:
  # Validate Inputs
  validate:
    name: Validate Inputs
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate environment
        run: |
          if [ "${{ github.event.inputs.environment }}" != "staging" ] && [ "${{ github.event.inputs.environment }}" != "production" ]; then
            echo "❌ Invalid environment: ${{ github.event.inputs.environment }}"
            exit 1
          fi
          echo "✅ Environment: ${{ github.event.inputs.environment }}"
          
      - name: Set environment variables
        run: |
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            echo "EKS_CLUSTER_NAME=ai-bi-cluster" >> $GITHUB_ENV
            echo "NAMESPACE=ai-business-intelligence" >> $GITHUB_ENV
          else
            echo "EKS_CLUSTER_NAME=ai-bi-cluster-staging" >> $GITHUB_ENV
            echo "NAMESPACE=ai-business-intelligence-staging" >> $GITHUB_ENV
          fi
          
          echo "IMAGE_TAG=${{ github.event.inputs.image_tag }}" >> $GITHUB_ENV

  # Run Tests (Optional)
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ !github.event.inputs.skip_tests }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
          
      - name: Run tests
        run: |
          pytest tests/ -v --cov=agents --cov=core --cov=api --cov-report=xml
          
      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: test-coverage
          path: coverage.xml

  # Build and Push Image
  build:
    name: Build and Push Image
    runs-on: ubuntu-latest
    needs: [validate, test]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped' || github.event.inputs.force_deploy)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/docker/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Environment
  deploy:
    name: Deploy to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    needs: [validate, test, build]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped' || github.event.inputs.force_deploy) && needs.build.result == 'success'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --region ${{ env.AWS_REGION }} \
            --name ${{ env.EKS_CLUSTER_NAME }}
            
      - name: Create secrets
        run: |
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            kubectl create secret generic ai-bi-secrets \
              --from-literal=DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              --from-literal=JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              --from-literal=ALPHA_VANTAGE_API_KEY="${{ secrets.ALPHA_VANTAGE_API_KEY }}" \
              --from-literal=FINNHUB_API_KEY="${{ secrets.FINNHUB_API_KEY }}" \
              --from-literal=OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              --from-literal=GRAFANA_PASSWORD="${{ secrets.GRAFANA_PASSWORD }}" \
              --namespace ${{ env.NAMESPACE }} \
              --dry-run=client -o yaml | kubectl apply -f -
          else
            kubectl create secret generic ai-bi-secrets \
              --from-literal=DB_PASSWORD="${{ secrets.STAGING_DB_PASSWORD }}" \
              --from-literal=JWT_SECRET="${{ secrets.STAGING_JWT_SECRET }}" \
              --from-literal=ALPHA_VANTAGE_API_KEY="${{ secrets.ALPHA_VANTAGE_API_KEY }}" \
              --from-literal=FINNHUB_API_KEY="${{ secrets.FINNHUB_API_KEY }}" \
              --from-literal=OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              --from-literal=GRAFANA_PASSWORD="${{ secrets.STAGING_GRAFANA_PASSWORD }}" \
              --namespace ${{ env.NAMESPACE }} \
              --dry-run=client -o yaml | kubectl apply -f -
          fi
          
      - name: Update kustomization
        run: |
          sed -i "s|newName: ai-business-intelligence|newName: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}|g" \
            deployment/kubernetes/kustomization.yaml
          sed -i "s|newTag: latest|newTag: ${{ env.IMAGE_TAG }}|g" \
            deployment/kubernetes/kustomization.yaml
          sed -i "s|namespace: ai-business-intelligence|namespace: ${{ env.NAMESPACE }}|g" \
            deployment/kubernetes/kustomization.yaml
            
      - name: Deploy application
        run: |
          kubectl apply -k deployment/kubernetes/
          
      - name: Wait for deployment
        run: |
          kubectl wait --for=condition=available --timeout=300s \
            deployment/ai-bi-app -n ${{ env.NAMESPACE }}
            
      - name: Get application URL
        id: app-url
        run: |
          INGRESS_HOST=$(kubectl get ingress ai-bi-ingress -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.rules[0].host}')
          echo "url=https://$INGRESS_HOST" >> $GITHUB_OUTPUT
          
      - name: Verify deployment
        run: |
          kubectl get pods -n ${{ env.NAMESPACE }}
          kubectl get services -n ${{ env.NAMESPACE }}
          kubectl get ingress -n ${{ env.NAMESPACE }}
          
      - name: Health check
        run: |
          # Wait for application to be ready
          sleep 30
          
          # Test health endpoint
          curl -f ${{ steps.app-url.outputs.url }}/health || exit 1
          echo "✅ Health check passed"

  # Rollback (if deployment fails)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: needs.deploy.result == 'failure'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --region ${{ env.AWS_REGION }} \
            --name ${{ env.EKS_CLUSTER_NAME }}
            
      - name: Rollback deployment
        run: |
          kubectl rollout undo deployment/ai-bi-app -n ${{ env.NAMESPACE }}
          kubectl rollout status deployment/ai-bi-app -n ${{ env.NAMESPACE }}
          
      - name: Notify rollback
        run: |
          echo "🚨 Deployment failed and was rolled back"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Image tag: ${{ github.event.inputs.image_tag }}"

  # Deployment Summary
  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [validate, test, build, deploy, rollback]
    if: always()
    
    steps:
      - name: Generate deployment summary
        run: |
          echo "## Manual Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag**: ${{ github.event.inputs.image_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation**: ${{ needs.validate.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build**: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy**: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Rollback**: ${{ needs.rollback.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "✅ **Deployment successful!**" >> $GITHUB_STEP_SUMMARY
            echo "Application URL: ${{ needs.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.rollback.result }}" = "success" ]; then
            echo "🚨 **Deployment failed and was rolled back**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment failed**" >> $GITHUB_STEP_SUMMARY
          fi 