name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  AWS_REGION: us-west-2

jobs:
  # SAST (Static Application Security Testing)
  sast:
    name: SAST Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: python
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        
      - name: Run Bandit security linter
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-report.json || true
          
      - name: Upload Bandit results
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit-report.json

  # Container Security
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Build Docker image
        run: |
          docker build -t ai-business-intelligence:test ./deployment/docker/
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ai-business-intelligence:test'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run Hadolint for Dockerfile linting
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: deployment/docker/Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
          
      - name: Upload Hadolint results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'hadolint-results.sarif'

  # Dependency Security
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install safety pip-audit
          
      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true
          
      - name: Run pip-audit
        run: |
          pip-audit --format json --output pip-audit-report.json || true
          
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: dependency-security-reports
          path: |
            safety-report.json
            pip-audit-report.json

  # Infrastructure Security
  infrastructure-security:
    name: Infrastructure Security Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"
          
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: deployment/terraform/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          
      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'checkov-results.sarif'

  # Security Summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [sast, container-security, dependency-check, infrastructure-security]
    if: always()
    
    steps:
      - name: Download all security reports
        uses: actions/download-artifact@v3
        with:
          path: security-reports
          
      - name: Generate security summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Scan Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **SAST**: ${{ needs.sast.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Security**: ${{ needs.container-security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependency Check**: ${{ needs.dependency-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Infrastructure Security**: ${{ needs.infrastructure-security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Review security findings in the Security tab" >> $GITHUB_STEP_SUMMARY
          echo "2. Address high and critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "3. Update dependencies if needed" >> $GITHUB_STEP_SUMMARY
          echo "4. Review infrastructure security recommendations" >> $GITHUB_STEP_SUMMARY 