version: '3.8'

services:
  # AI Business Intelligence API
  ai-api:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile
    container_name: ai-business-intelligence-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://postgres:password@postgres:5432/ai_business_intelligence
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - ai-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-business-intelligence-postgres
    environment:
      - POSTGRES_DB=ai_business_intelligence
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - ai-network

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: ai-business-intelligence-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - ai-network

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-business-intelligence-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - ai-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ai-business-intelligence-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployment/docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - ai-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ai-business-intelligence-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/docker/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/docker/ssl:/etc/nginx/ssl
    depends_on:
      - ai-api
    restart: unless-stopped
    networks:
      - ai-network

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile
    container_name: ai-business-intelligence-celery-worker
    command: celery -A core.celery_app worker --loglevel=info
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://postgres:password@postgres:5432/ai_business_intelligence
    depends_on:
      - redis
      - postgres
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - ai-network

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile
    container_name: ai-business-intelligence-celery-beat
    command: celery -A core.celery_app beat --loglevel=info
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://postgres:password@postgres:5432/ai_business_intelligence
    depends_on:
      - redis
      - postgres
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - ai-network

  # Flower for Celery Monitoring
  flower:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile
    container_name: ai-business-intelligence-flower
    command: celery -A core.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
      - celery-worker
    restart: unless-stopped
    networks:
      - ai-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ai-network:
    driver: bridge 